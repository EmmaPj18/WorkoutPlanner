// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutPlanner.Persistence;

#nullable disable

namespace WorkoutPlanner.Migrations.Migrations
{
    [DbContext(typeof(ReadWriteWorkoutPlannerDbContext))]
    partial class ReadWriteWorkoutPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplainVideoUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Exercise", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id", "Category");

                    b.HasIndex("Category", "Name");

                    b.ToTable("Lookup", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "SetType",
                            Description = "AMRAP - As Many Rounds As Possible",
                            IsActive = true,
                            Name = "AMRAP",
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "SetType",
                            Description = "EMON - Every Minute On a Minute",
                            IsActive = true,
                            Name = "EMON",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = "SetType",
                            Description = "RTF - Rounds For Time",
                            IsActive = true,
                            Name = "RFT",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 4,
                            Category = "SetType",
                            Description = "RM - Round Max or Rep Max",
                            IsActive = true,
                            Name = "RM",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 5,
                            Category = "SetType",
                            Description = "Ladder - Increasing or Decreasing Workload over time",
                            IsActive = true,
                            Name = "Ladder",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 6,
                            Category = "SetType",
                            Description = "Tabata - 8 rounds of High-Intensity intervals. 20 seconds effort + 10 seconds rest",
                            IsActive = true,
                            Name = "Tabata",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 7,
                            Category = "SetType",
                            Description = "Chipper - List of excercises to do in the order that is listed",
                            IsActive = true,
                            Name = "Chipper",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 1,
                            Category = "QuantityType",
                            Description = "Seconds per excersice rep",
                            IsActive = true,
                            Name = "Seconds",
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "QuantityType",
                            Description = "Minutes per excersice rep",
                            IsActive = true,
                            Name = "Minutes",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = "QuantityType",
                            Description = "Repetitions over excercise",
                            IsActive = true,
                            Name = "Reps",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplainVideoUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Routine", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.RoutineSet", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("SetId", "RoutineId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineSet", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplainVideoUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RoundsNumber")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("Set", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.SetExercise", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int>("QuantityType")
                        .HasColumnType("int");

                    b.HasKey("SetId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("SetExercise", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.UserRoutine", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkOutDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("UserId", "RoutineId");

                    b.HasIndex("RoutineId");

                    b.ToTable("UserRoutine", "dbo");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.RoutineSet", b =>
                {
                    b.HasOne("WorkoutPlanner.Domain.Entities.Routine", "Routine")
                        .WithMany("RoutineSets")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutPlanner.Domain.Entities.Set", "Set")
                        .WithMany("RoutineSets")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.SetExercise", b =>
                {
                    b.HasOne("WorkoutPlanner.Domain.Entities.Exercise", "Exercise")
                        .WithMany("SetExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutPlanner.Domain.Entities.Set", "Set")
                        .WithMany("SetExercises")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.UserRoutine", b =>
                {
                    b.HasOne("WorkoutPlanner.Domain.Entities.Routine", "Routine")
                        .WithMany("UserRoutines")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutPlanner.Domain.Entities.User", "User")
                        .WithMany("UserRoutines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("SetExercises");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Routine", b =>
                {
                    b.Navigation("RoutineSets");

                    b.Navigation("UserRoutines");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.Set", b =>
                {
                    b.Navigation("RoutineSets");

                    b.Navigation("SetExercises");
                });

            modelBuilder.Entity("WorkoutPlanner.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoutines");
                });
#pragma warning restore 612, 618
        }
    }
}
